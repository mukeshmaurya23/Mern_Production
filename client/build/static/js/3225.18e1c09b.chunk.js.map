{"version":3,"file":"static/js/3225.18e1c09b.chunk.js","mappings":"iKACA,EAAuB,mBAAvB,EAA0E,sBAA1E,EAA0G,sBAA1G,EAA0I,sBAA1I,EAA6K,yB,uCCyB7K,EAzBiB,SAACA,GAChB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA4CF,EAAAA,EAAAA,WAAS,GAArD,eAAOG,EAAP,KAAuBC,EAAvB,KAEMC,EAAeN,EAASE,GAY9B,MAAO,CACLK,MAAOL,EACPM,UAb2BF,GAAgBF,EAc3CK,QAASH,EACTI,MARY,WACZP,EAAc,IACdE,GAAkB,IAOlBM,sBAZ4B,WAC5BN,GAAkB,IAYlBO,wBAhB8B,SAACC,GAC/BV,EAAcU,EAAMC,OAAOP,U,SCmF/B,EArFa,WACX,IAAMQ,GAAWC,EAAAA,EAAAA,MAIjB,EAOIC,GAAS,SAACV,GAAD,OAAWA,EAAMW,OAAS,KAN9BC,EADT,EACEZ,MACUa,EAFZ,EAEEZ,SACSa,EAHX,EAGEZ,QACyBa,EAJ3B,EAIEV,wBACuBW,EALzB,EAKEZ,sBACOa,EANT,EAMEd,MAEF,EAOIO,GAAS,SAACV,GAAD,OAAWA,EAAMkB,SAAS,QAN9BC,EADT,EACEnB,MACUoB,EAFZ,EAEEnB,SACSoB,EAHX,EAGEnB,QACyBoB,EAJ3B,EAIEjB,wBACuBkB,EALzB,EAKEnB,sBACOoB,EANT,EAMErB,MAGEsB,GAAc,EACdX,GAAmBO,IACrBI,GAAc,GAGhB,IAQMC,EAA2C,UAAtBb,EACpBc,EACAA,GACDC,EAAqC,UAAnBR,EACjBO,EACAA,GACP,OACE,iCACE,SAACE,EAAA,EAAD,WACE,kBAAMC,UAAWH,EAAaI,SAjBV,SAACzB,GACzBA,EAAM0B,kBACDlB,GAAoBO,KAGzBG,IACAP,MAWI,WACE,eAAIa,UAAU,OAAd,4CAEA,iBAAKA,UAAWF,EAAhB,WACE,kBAAOK,QAAQ,QAAf,4BACA,kBACEC,KAAK,QACLC,GAAG,QACHnC,MAAOmB,EACPiB,SAAUd,EACVe,OAAQd,OAGXH,IACC,cAAGU,UAAWH,EAAd,gCAEF,iBAAKG,UAAWJ,EAAhB,WACE,kBAAOO,QAAQ,QAAf,uBACA,kBACEC,KAAK,WACLC,GAAG,WACHnC,MAAOY,EACPwB,SAAUrB,EACVsB,OAAQrB,OAGXH,IACC,cAAGiB,UAAWH,EAAd,mCAEF,gBAAKG,UAAWH,EAAhB,UACE,mBAAQW,UAAWb,EAAac,QAxErB,WACnB/B,EAAS,gBAuED,4BAMN,SAACgC,EAAA,EAAD","sources":["webpack://client/./src/components/pages/Sign.module.css?a09b","hooks/useValid.js","components/pages/Sign.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Sign_form__JQqxL\",\"h2\":\"Sign_h2__vMygt\",\"control\":\"Sign_control__0qqw-\",\"actions\":\"Sign_actions__1926R\",\"invalid\":\"Sign_invalid__x-k5I\",\"error-text\":\"Sign_error-text__bzyvk\"};","import { useState } from \"react\";\r\nconst useValid = (validate) => {\r\n  const [enterValue, setEnterValue] = useState(\"\");\r\n  const [valueIsTouched, setValueIsTouched] = useState(false);\r\n\r\n  const valueIsValid = validate(enterValue);\r\n  const valueInputIsInvalid = !valueIsValid && valueIsTouched;\r\n  const valueInputChangeHandler = (event) => {\r\n    setEnterValue(event.target.value);\r\n  };\r\n  const valueInputBlurHandler = () => {\r\n    setValueIsTouched(true);\r\n  };\r\n  const reset = () => {\r\n    setEnterValue(\"\");\r\n    setValueIsTouched(false);\r\n  };\r\n  return {\r\n    value: enterValue,\r\n    hasError: valueInputIsInvalid,\r\n    isValid: valueIsValid,\r\n    reset,\r\n    valueInputBlurHandler,\r\n    valueInputChangeHandler,\r\n  };\r\n};\r\nexport default useValid;\r\n","import React from \"react\";\r\nimport styles from \"./Sign.module.css\";\r\nimport NormalCard from \"../../UI/NormalCard\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useValid from \"../../hooks/useValid\";\r\nconst Sign = () => {\r\n  const navigate = useNavigate();\r\n  const loginHandler = () => {\r\n    navigate(\"/admin/data\");\r\n  };\r\n  const {\r\n    value: enteredPassword,\r\n    hasError: passwordInputIsInvalid,\r\n    isValid: passwordIsValid,\r\n    valueInputChangeHandler: passwordInputChangeHandler,\r\n    valueInputBlurHandler: passwordInputBlurHandler,\r\n    reset: passwordReset,\r\n  } = useValid((value) => value.length > 6);\r\n  const {\r\n    value: enteredEmail,\r\n    hasError: emailInputIsInvalid,\r\n    isValid: emailIsValid,\r\n    valueInputChangeHandler: emailInputChangeHandler,\r\n    valueInputBlurHandler: emailInputBlurHandler,\r\n    reset: emailReset,\r\n  } = useValid((value) => value.includes(\"@\"));\r\n\r\n  let FormISValid = false;\r\n  if (passwordIsValid && emailIsValid) {\r\n    FormISValid = true;\r\n  }\r\n\r\n  const formSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    if (!passwordIsValid && !emailIsValid) {\r\n      return;\r\n    }\r\n    emailReset();\r\n    passwordReset();\r\n  };\r\n  const passwordInputclass = passwordInputIsInvalid\r\n    ? `${styles[\"invalid\"]}`\r\n    : `${styles[\"control\"]}`;\r\n  const emailInputClass = emailInputIsInvalid\r\n    ? `${styles.invalid}`\r\n    : `${styles.control}`;\r\n  return (\r\n    <>\r\n      <NormalCard>\r\n        <form className={styles.form} onSubmit={formSubmitHandler}>\r\n          <h1 className=\"mt-5\">Only Admin Can Sign in Here!!</h1>\r\n\r\n          <div className={emailInputClass}>\r\n            <label htmlFor=\"title\">Email Address</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              value={enteredEmail}\r\n              onChange={emailInputChangeHandler}\r\n              onBlur={emailInputBlurHandler}\r\n            />\r\n          </div>\r\n          {emailInputIsInvalid && (\r\n            <p className={styles[\"error-text\"]}>Enter valid Email</p>\r\n          )}\r\n          <div className={passwordInputclass}>\r\n            <label htmlFor=\"title\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              value={enteredPassword}\r\n              onChange={passwordInputChangeHandler}\r\n              onBlur={passwordInputBlurHandler}\r\n            />\r\n          </div>\r\n          {passwordInputIsInvalid && (\r\n            <p className={styles[\"error-text\"]}>Enter valid Password</p>\r\n          )}\r\n          <div className={styles.actions}>\r\n            <button disabled={!FormISValid} onClick={loginHandler}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </NormalCard>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sign;\r\n"],"names":["validate","useState","enterValue","setEnterValue","valueIsTouched","setValueIsTouched","valueIsValid","value","hasError","isValid","reset","valueInputBlurHandler","valueInputChangeHandler","event","target","navigate","useNavigate","useValid","length","enteredPassword","passwordInputIsInvalid","passwordIsValid","passwordInputChangeHandler","passwordInputBlurHandler","passwordReset","includes","enteredEmail","emailInputIsInvalid","emailIsValid","emailInputChangeHandler","emailInputBlurHandler","emailReset","FormISValid","passwordInputclass","styles","emailInputClass","NormalCard","className","onSubmit","preventDefault","htmlFor","type","id","onChange","onBlur","disabled","onClick","Footer"],"sourceRoot":""}